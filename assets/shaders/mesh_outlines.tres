[gd_resource type="Shader" format=2]

[resource]
code = "shader_type spatial;
render_mode cull_front, unshaded, ambient_light_disabled, shadows_disabled;

uniform bool vertex_colors_normals = false;
uniform bool relative_thickness = true;
uniform lowp float outline_thickness: hint_range(0.0, 1.0, 0.0001) = 0.002;
uniform lowp float min_abs_thickness: hint_range(0.0, 1.0, 0.0001) = 0.005;
uniform lowp vec4 outline_color: hint_color = vec4(0.0, 0.0, 0.0, 1.0);
uniform highp sampler2D outline_texture: hint_albedo;
uniform lowp float max_intensity: hint_range(0.0, 1.0, 0.001) = 0.1;

void vertex() {
	float t = outline_thickness;
	if(relative_thickness) {
		vec3 camera_pos = (CAMERA_MATRIX * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
		vec3 world_pos = (WORLD_MATRIX * vec4(VERTEX, 1.0)).xyz;
		float camera_distance = distance(world_pos, camera_pos);
		
		t = max(min_abs_thickness, camera_distance * outline_thickness);
	}
	
	if(vertex_colors_normals) {
		VERTEX += normalize((COLOR.rgb - vec3(0.5)) * 2.0) * t;
	} else {
		VERTEX += normalize(VERTEX) * t;
	}
}

void fragment() {
	vec3 col = texture(outline_texture, UV).rgb;
	vec3 col_sc = outline_color.rgb * col;
	float avg = (0.28 * col_sc.r + 0.58 * col_sc.g + 0.14 * col_sc.b);
	float scale = min(max_intensity / avg, 1.0);
	ALBEDO = col_sc * scale;
}
"
