[gd_resource type="Shader" format=2]

[resource]
code = "shader_type spatial;
render_mode unshaded, depth_test_disable;

varying mat4 CAMERA;

float lin_depth(sampler2D depth_tex, vec2 screen_uv, mat4 inv_matrix) {
	float depth = texture(depth_tex, screen_uv).x;
	vec3 ndc = vec3(screen_uv, depth) * 2.0 - 1.0;
	vec4 view = inv_matrix * vec4(ndc, 1.0);
	view.xyz /= view.w;
	float linear_depth = -view.z;
	
	return linear_depth;
}

float rand(vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

void vertex() {
	POSITION = vec4(VERTEX, 1.0);
	CAMERA = CAMERA_MATRIX;
}

void fragment() {
	float linear_depth = lin_depth(DEPTH_TEXTURE, SCREEN_UV, INV_PROJECTION_MATRIX);
	float d = (linear_depth - 0.5) / 5.0;
	
	vec4 screen = texture(SCREEN_TEXTURE, SCREEN_UV);
	ALBEDO = vec3(0.0, 0.0, 0.0); //vec3(d, d, d);
	ALPHA = 0.0;
}
"
